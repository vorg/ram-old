// Generated by CoffeeScript 1.6.2
cashflow.controller('MonthlySummaryController', function($timeout, $rootScope, $scope, $q, dataSource) {
  var RNG, actionThreshold, bgIcon, byValue, categoryColors, componentToHex, deltaX, deltaY, draggedElement, draggedElementBg, draggedItem, getCategoryColor, hash, icons, kIconDelete, kIconEdit, kIconInfo, onDragEnd, onDragMove, onTouchEnd, onTouchMove, randomColor, rgbToHex, startX, startY, subActionTreshold, touchDragStarted;

  $scope.categories = [];
  $scope.active = false;
  $scope.month = null;
  $scope.year = null;
  $scope.date = new Date();
  $scope.accountid = null;
  RNG = function(seed) {
    this.m = 0x80000000;
    this.a = 1103515245;
    this.c = 12345;
    return this.state = seed != null ? seed : {
      seed: Math.floor(Math.random() * (this.m - 1))
    };
  };
  RNG.prototype.nextInt = function() {
    return this.state = (this.a * this.state + this.c) % this.m;
  };
  RNG.prototype.nextFloat = function() {
    return this.nextInt() / (this.m - 1);
  };
  byValue = function(a, b) {
    return a.value - b.value;
  };
  componentToHex = function(c) {
    var hex;

    hex = c.toString(16);
    if (hex.length === 1) {
      return "0" + hex;
    } else {
      return hex;
    }
  };
  rgbToHex = function(r, g, b) {
    return "#" + componentToHex(Math.floor(r)) + componentToHex(Math.floor(g)) + componentToHex(Math.floor(b));
  };
  $scope.formatValue = function(value) {
    var s;

    s = '' + Math.floor(value * 100) / 100;
    if (s.indexOf('.') === -1) {
      s = s + '.00';
    }
    if (s.indexOf('.') === s.length - 2) {
      s = s + '0';
    }
    return s;
  };
  randomColor = function(f) {
    var c, color;

    if (!f) {
      f = Math.random();
    }
    c = chroma.lch(70, 50, 360 * f);
    color = {
      bright: rgbToHex(c.rgb()[0], c.rgb()[1], c.rgb()[2]),
      dark: rgbToHex(c.darken().rgb()[0], c.darken().rgb()[1], c.darken().rgb()[2])
    };
    return color;
  };
  hash = function(s) {
    var i, rnd, sum, _i, _ref;

    sum = 0;
    for (i = _i = 0, _ref = s.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      sum += s.charCodeAt(0) * i * s.charCodeAt(i);
    }
    rnd = new RNG(sum + 3);
    rnd.nextFloat();
    rnd.nextFloat();
    rnd.nextFloat();
    return rnd.nextFloat();
  };
  categoryColors = {
    'total': '#333333',
    'food': '#F11238',
    'groceries': '#66AD33',
    'home': '#FD8330',
    'transport': '#F0A434',
    'bills': '#5B657C',
    'amusement': '#4D28F1',
    'gift': '#7111E1',
    'personal': '#326BC8',
    'clothes': '#BB300E',
    'travel': '#33B3F1'
  };
  getCategoryColor = function(cat) {
    var c, color, hex;

    hex = categoryColors[cat];
    if (!hex) {
      hex = "#999";
    }
    c = chroma.hex(hex);
    return color = {
      bright: c.hex(),
      dark: c.darken().hex()
    };
  };
  $rootScope.$on('toggleMonthlySummary', function(event, id) {
    return $scope.active = !$scope.active;
  });
  $scope.prev = function() {
    if ($scope.month > 0) {
      $scope.month--;
    } else {
      $scope.month = 11;
      $scope.year--;
    }
    return $scope.updateCategories();
  };
  $scope.next = function() {
    if ($scope.month < 11) {
      $scope.month++;
    } else {
      $scope.month = 0;
      $scope.year++;
    }
    return $scope.updateCategories();
  };
  $scope.updateCategories = function() {
    var categories, categoriesMap, color, items, totalCat;

    items = $scope.items;
    if (items.length === 0) {
      return;
    }
    if (!$scope.year) {
      $scope.month = items[0].date.getMonth();
      $scope.year = items[0].date.getFullYear();
    }
    color = getCategoryColor('total');
    totalCat = {
      name: 'total',
      subCategories: [],
      subCategoriesMap: {},
      value: 0,
      collapsed: true,
      color: color.bright,
      subColor: color.dark
    };
    categoriesMap = {
      'total': 'totalCat'
    };
    categories = [totalCat];
    items.forEach(function(item) {
      var cat, itemCategories, mainCategory, subCat, subCategory;

      itemCategories = item.category.split(' ');
      if (item.category === 'food groceries') {
        itemCategories = ['groceries', 'groceries'];
      }
      mainCategory = itemCategories[0];
      subCategory = itemCategories[1];
      if (item.date.getMonth() !== $scope.month) {
        return;
      }
      if (item.date.getFullYear() !== $scope.year) {
        return;
      }
      $scope.date = item.date;
      if (mainCategory) {
        cat = categoriesMap[mainCategory];
        if (!cat) {
          color = getCategoryColor(mainCategory);
          cat = {
            name: mainCategory,
            subCategories: [],
            subCategoriesMap: {},
            value: 0,
            collapsed: true,
            color: color.bright,
            subColor: color.dark
          };
          categoriesMap[mainCategory] = cat;
          categories.push(cat);
        }
        if (item.operation === '-') {
          cat.value -= item.value;
        }
        if (item.operation === '+') {
          cat.value += item.value;
        }
        if (item.operation === '-') {
          totalCat.value -= item.value;
        }
        if (!subCategory) {
          subCategory = 'other';
        }
        subCat = cat.subCategoriesMap[subCategory];
        if (!subCat) {
          subCat = {
            name: subCategory,
            value: 0,
            collapsed: true,
            items: []
          };
          cat.subCategoriesMap[subCategory] = subCat;
          cat.subCategories.push(subCat);
        }
        subCat.items.unshift(item);
        if (item.operation === '-') {
          subCat.value -= item.value;
        }
        if (item.operation === '+') {
          return subCat.value += item.value;
        }
      }
    });
    $scope.date.setMonth($scope.month);
    categories.sort(byValue);
    categories.forEach(function(cat) {
      return cat.subCategories.sort(byValue);
    });
    return $scope.categories = categories;
  };
  $rootScope.$on('accountChanged', function(event, id) {
    $scope.month = null;
    $scope.year = null;
    $scope.accountid = id;
    return $timeout(function() {
      $scope.items = [];
      $scope.categories = [];
      return dataSource.getItems(id).then(function(items) {
        $scope.items = items;
        return $scope.updateCategories();
      });
    }, 700);
  });
  $scope.fixPosition = function() {
    return console.log();
  };
  kIconDelete = 0;
  kIconInfo = 1;
  kIconEdit = 2;
  icons = ['img/x.png', 'img/info.png', 'img/edit.png'];
  actionThreshold = 100;
  subActionTreshold = 1.5;
  draggedItem = null;
  draggedElement = null;
  draggedElementBg = null;
  touchDragStarted = false;
  startX = -1;
  deltaX = -1;
  startY = -1;
  deltaY = -1;
  bgIcon = null;
  $scope.onTouchDragStart = function(e, item) {
    if (e.gesture.srcEvent.touches) {
      bgIcon = null;
      draggedItem = item;
      draggedElement = e.currentTarget;
      draggedElementBg = e.currentTarget.querySelector('div');
      startX = e.gesture.srcEvent.touches[0].clientX;
      startY = e.gesture.srcEvent.touches[0].clientY;
      draggedElement.addEventListener('touchmove', onTouchMove);
      return draggedElement.addEventListener('touchend', onTouchEnd);
    }
  };
  onTouchMove = function(e) {
    deltaX = e.touches[0].clientX - startX;
    deltaY = e.touches[0].clientY - startY;
    if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
      touchDragStarted = true;
    }
    if (touchDragStarted) {
      onDragMove(e);
      e.preventDefault();
      return false;
    }
  };
  onTouchEnd = function(e) {
    onDragEnd(e);
    touchDragStarted = false;
    window.removeEventListener('touchmove', onTouchMove);
    return window.removeEventListener('touchend', onTouchEnd);
  };
  $scope.onDragStart = function(e, item) {
    bgIcon = null;
    draggedItem = item;
    draggedElement = e.currentTarget;
    draggedElementBg = e.currentTarget.querySelector('div');
    startX = e.pageX;
    startY = e.pageY;
    window.addEventListener('mousemove', onDragMove);
    return window.addEventListener('mouseup', onDragEnd);
  };
  onDragMove = function(e) {
    var k;

    if (!e.touches) {
      deltaX = e.pageX - startX;
      deltaY = e.pageY - startY;
    }
    if (deltaX < 0 && startX > 0) {
      draggedElementBg.style.left = deltaX + 'px';
      k = -deltaX / actionThreshold;
      draggedElement.style.backgroundColor = "rgba(255,0,0," + (k * 0.25) + ")";
      if (k > subActionTreshold) {
        draggedElement.style.backgroundColor = "rgba(255,0,0,1)";
      }
      if (bgIcon !== kIconDelete) {
        bgIcon = kIconDelete;
        draggedElement.style.backgroundImage = 'url(' + icons[bgIcon] + ')';
        draggedElement.style.backgroundPosition = 'top right';
      }
    } else if (deltaX > 0 && startX > 0) {
      draggedElementBg.style.left = deltaX + 'px';
      k = deltaX / actionThreshold;
      draggedElement.style.backgroundColor = "rgba(0,200,0," + k + ")";
      if (k > subActionTreshold) {
        draggedElement.style.backgroundColor = "rgba(255,200,0,1)";
        if (bgIcon !== kIconEdit) {
          bgIcon = kIconEdit;
          draggedElement.style.backgroundImage = 'url(' + icons[bgIcon] + ')';
          draggedElement.style.backgroundPosition = 'top left';
        }
      } else if (bgIcon !== kIconInfo) {
        bgIcon = kIconInfo;
        draggedElement.style.backgroundImage = 'url(' + icons[bgIcon] + ')';
        draggedElement.style.backgroundPosition = 'top left';
      }
    }
    if (Math.abs(deltaX) > 30) {
      e.preventDefault();
      return false;
    }
  };
  return onDragEnd = function(e) {
    draggedElementBg.style.left = 0 + 'px';
    if (deltaX < -actionThreshold * subActionTreshold) {
      dataSource.removeItem(draggedItem);
    } else if (deltaX > actionThreshold * subActionTreshold) {
      $rootScope.$apply(function() {
        return $rootScope.$broadcast('editItem', draggedItem);
      });
    }
    startX = 0;
    startY = 0;
    draggedItem = null;
    if (e) {
      window.removeEventListener('mousemove', onDragMove);
      return window.removeEventListener('mouseup', onDragEnd);
    }
  };
});
