// Generated by CoffeeScript 1.6.2
angular.module('cashflow.service', []).factory('dataSource', function($rootScope, $q) {
  var DB_NAME, DataSourceService, REMOTE_DB, changes, local;

  DB_NAME = 'cashflow';
  REMOTE_DB = 'http://node.variable.io:5984/cashflow';
  local = null;
  changes = null;
  DataSourceService = {
    init: function() {
      var self,
        _this = this;

      console.log('DataSourceService.init');
      self = this;
      return Pouch(DB_NAME, function(err, db) {
        console.log('DataSourceService.init createdDataBase', DB_NAME);
        if (!err) {
          local = db;
          return db.changes({
            complete: function(err, response) {
              console.log('DataSourceService.init listenting to changes since', response.last_seq);
              $rootScope.$broadcast('dataSourceReady');
              return changes = db.changes({
                since: response.last_seq,
                continuous: true,
                include_docs: true,
                onChange: function(change) {
                  console.log('DataSourceService.onChange', change);
                  return $rootScope.$apply(function() {
                    return self.onChange(change);
                  });
                }
              });
            }
          });
        } else {
          return console.log(err);
        }
      });
    },
    onChange: function(change) {
      var item;

      if (change.doc) {
        if (change.doc.type === 'item') {
          item = this.prepareItem(change.doc);
          $rootScope.$broadcast('itemChanged', item);
        }
        if (change.doc._deleted) {
          return $rootScope.$broadcast('itemChanged', {
            _id: change.doc._id,
            _deleted: true
          });
        }
      }
    },
    getAccounts: function() {
      var deferred, mapAccounts;

      console.log('DataSourceService.getAccounts');
      mapAccounts = "function(doc) {\n  if (doc.type == 'account') {\n    emit(null, doc)\n  }\n}";
      deferred = $q.defer();
      local.query({
        'map': mapAccounts
      }, {}, function(error, result) {
        var accounts;

        accounts = result.rows.map(function(row) {
          return row.value;
        });
        return $rootScope.$apply(function() {
          return deferred.resolve(accounts);
        });
      });
      return deferred.promise;
    },
    prepareItem: function(item) {
      item.date = new Date(item.date);
      return item;
    },
    getItems: function(accountid) {
      var deferred, mapItems,
        _this = this;

      console.log('DataSourceService.getItems');
      mapItems = "function(doc) {\n  if (doc.type == 'item' && doc.accountid == '" + accountid + "') {\n    emit(null, doc)\n  }\n}";
      deferred = $q.defer();
      local.query({
        'map': mapItems
      }, {}, function(error, result) {
        var items;

        items = result.rows.map(function(row) {
          return _this.prepareItem(row.value);
        });
        return $rootScope.$apply(function() {
          return deferred.resolve(items);
        });
      });
      return deferred.promise;
    },
    dateToIso: function(date) {
      var day, month, year;

      year = date.getFullYear();
      month = date.getMonth() + 1;
      if (month < 10) {
        month = '0' + month;
      }
      day = date.getDate();
      if (day < 10) {
        day = '0' + day;
      }
      return "" + year + "-" + month + "-" + day;
    },
    addItem: function(accountid, date, operation, valueInt, valueFrac, category, notes, recurring, itemToUpdate) {
      var deferred, item, now, value;

      if (operation == null) {
        operation = '-';
      }
      if (category == null) {
        category = '';
      }
      if (notes == null) {
        notes = '';
      }
      if (recurring == null) {
        recurring = '';
      }
      if (itemToUpdate == null) {
        itemToUpdate = null;
      }
      console.log('DataSourceService.addItem');
      date = new Date(date);
      if (isNaN(date.getTime())) {
        date = new Date();
      }
      now = new Date();
      date.setHours(now.getHours());
      date.setMinutes(now.getMinutes());
      date.setSeconds(now.getSeconds());
      valueInt = Number(valueInt);
      if (isNaN(valueInt)) {
        valueInt = 0;
      }
      valueFrac = Number(valueFrac);
      if (isNaN(valueFrac)) {
        valueFrac = 0;
      }
      value = valueInt + valueFrac / 100;
      deferred = $q.defer();
      item = {
        type: 'item',
        accountid: accountid,
        date: '' + date,
        operation: operation,
        value: value,
        category: category,
        notes: notes,
        recurring: recurring
      };
      if (!itemToUpdate) {
        local.post(item, function(err, response) {
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        });
      } else {
        item._id = itemToUpdate._id;
        item._rev = itemToUpdate._rev;
        console.log('About to update item', itemToUpdate);
        local.put(item, function(err, response) {
          if (err) {
            console.log(err);
          }
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        });
      }
      return deferred.promise;
    },
    updateItem: function(item, accountid, date, operation, valueInt, valueFrac, category, notes, recurring) {
      if (accountid == null) {
        accountid = item.accountid;
      }
      if (date == null) {
        date = item.date;
      }
      if (operation == null) {
        operation = item.operation;
      }
      if (valueInt == null) {
        valueInt = Math.floor(item.value);
      }
      if (valueFrac == null) {
        valueFrac = 100 * (item.value - Math.floor(item.value));
      }
      if (category == null) {
        category = item.category;
      }
      if (notes == null) {
        notes = item.notes;
      }
      if (recurring == null) {
        recurring = item.recurring;
      }
      return this.addItem(accountid, date, operation, valueInt, valueFrac, category, notes, recurring, item);
    },
    removeItem: function(item) {
      console.log('DataSourceService.removeItem', item);
      return local.remove(item, function(err, response) {
        if (err) {
          return console.log('DataSourceService.removeItem error', err);
        } else {
          console.log('DataSourceService.removeItem log', response);
          return local.get(item._id, function(err, response) {
            return console.log('DataSourceService.removeItem status', err, response);
          });
        }
      });
    }
  };
  DataSourceService.init();
  return DataSourceService;
});
