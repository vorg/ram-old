// Generated by CoffeeScript 1.6.2
Ram.Data = EventDispatcher.extend({
  local: null,
  init: function(callback) {
    var self;

    console.log('DataSource.init');
    self = this;
    return this.local = new Pouch(Ram.Config.DB_NAME, function(error, db) {
      console.timeEnd('DataSource.init');
      console.log('DataSource.init createdDataBase', Ram.Config.DB_NAME);
      db.info(function(err, info) {
        console.log('DataSource.init info', info);
        return db.changes({
          continuous: true,
          include_docs: true,
          since: info.update_seq,
          onChange: self.onChange.bind(self)
        });
      });
      if (callback) {
        return callback(self);
      }
    });
  },
  loadItems: function(callback) {
    var getRowValue, mapItems;

    mapItems = "function(doc) { return emit([doc.parentid || 0, doc.order], doc); }";
    getRowValue = function(row) {
      return row.value;
    };
    return this.local.query({
      'map': mapItems
    }, {
      reduce: false
    }, function(error, result) {
      var items;

      console.log('DataSource.getItems', error, result);
      items = result.rows.map(getRowValue);
      if (callback) {
        return callback(items);
      }
    });
  },
  onChange: function(change) {
    var item;

    if (change.doc) {
      if (change.doc._deleted) {
        item = {
          _id: change.doc._id,
          _deleted: true
        };
        return this.fire('itemChanged', item);
      } else {
        return this.fire('itemChanged', change.doc);
      }
    }
  },
  addItem: function(item) {
    return this.local.post(item, function(err, response) {
      return console.log('Added item', item, err, response);
    });
  },
  updateItem: function(item) {
    return this.local.post(item, function(err, response) {
      return console.log('Updated item', item, err, response);
    });
  },
  removeItemById: function(itemid) {
    var _this = this;

    console.log('DataSourceService.removeItemById', itemid);
    return this.local.get(itemid, function(err, doc) {
      if (err) {
        return console.log('DataSourceService.removeItemById error', err);
      }
      return _this.local.remove(doc, function(err, response) {
        if (err) {
          return console.log('DataSourceService.removeItemById error', err);
        } else {
          return console.log('DataSourceService.removeItemById log', response);
        }
      });
    });
  },
  removeItem: function(item) {
    console.log('DataSourceService.removeItem', item);
    return this.local.remove(item, function(err, response) {
      if (err) {
        return console.log('DataSourceService.removeItem error', err);
      } else {
        return console.log('DataSourceService.removeItem log', response);
      }
    });
  }
});
