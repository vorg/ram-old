// Generated by CoffeeScript 1.7.1
var addItemEventHandlers;

addItemEventHandlers = function(itemElem, item) {
  var activeAction, backgroundElem, bgIcon, deltaX, deltaY, foregroundElem, onDragEnd, onDragMove, onDragStart, onSlide, onSlideEnd, onSlideScroll, onSlideStart, onTouchEnd, onTouchMove, onTouchStart, startX, startY, touchDragging;
  backgroundElem = itemElem;
  foregroundElem = itemElem.querySelector('div');
  startX = 0;
  startY = 0;
  deltaX = 0;
  deltaY = 0;
  bgIcon = null;
  touchDragging = null;
  activeAction = null;
  onSlideStart = function(x, y) {
    startX = x;
    startY = y;
    bgIcon = null;
    foregroundElem.className += " dragged";
  };
  onSlide = function(x, y) {
    var alpha, color, icon, k;
    deltaX = x - startX;
    deltaY = y - startY;
    if (deltaX > 0 && startX > 0 && item.actions.left && item.actions.left.primary) {
      foregroundElem.style.left = deltaX + "px";
      k = deltaX / itemElem.clientWidth;
      alpha = 1;
      if (k < Ram.Config.ACTION_THRESHOLD) {
        alpha = k / Ram.Config.ACTION_THRESHOLD * 0.6;
        activeAction = null;
      } else {
        if (k > Ram.Config.ACTION_THRESHOLD) {
          activeAction = item.actions.left.primary;
        }
      }
      color = item.actions.left.primary.color;
      icon = item.actions.left.primary.icon;
      if (k > Ram.Config.SUB_ACTION_THRESHOLD && item.actions.left.secondary) {
        color = item.actions.left.secondary.color;
        icon = item.actions.left.secondary.icon;
        activeAction = item.actions.left.secondary;
      }
      backgroundElem.style.backgroundColor = "rgba(" + color.join(",") + "," + alpha + ")";
      if (bgIcon !== icon) {
        bgIcon = icon;
        backgroundElem.style.backgroundImage = "url(" + icon + ")";
        backgroundElem.style.backgroundPosition = "center left";
      }
    } else if (deltaX < 0 && startX > 0 && item.actions.right && item.actions.right.primary) {
      foregroundElem.style.left = deltaX + "px";
      k = -deltaX / itemElem.clientWidth;
      alpha = 1;
      if (k < Ram.Config.ACTION_THRESHOLD) {
        alpha = k / Ram.Config.ACTION_THRESHOLD * 0.6;
        activeAction = null;
      } else {
        if (k > Ram.Config.ACTION_THRESHOLD) {
          activeAction = item.actions.right.primary;
        }
      }
      color = item.actions.right.primary.color;
      icon = item.actions.right.primary.icon;
      if (k > Ram.Config.SUB_ACTION_THRESHOLD && item.actions.right.secondary) {
        color = item.actions.right.secondary.color;
        icon = item.actions.right.secondary.icon;
        activeAction = item.actions.right.secondary;
      }
      backgroundElem.style.backgroundColor = "rgba(" + color.join(",") + "," + alpha + ")";
      if (bgIcon !== icon) {
        bgIcon = icon;
        backgroundElem.style.backgroundImage = "url(" + icon + ")";
        backgroundElem.style.backgroundPosition = "center right";
      }
    }
  };
  onSlideScroll = function(x, y) {
    foregroundElem.style.left = 0 + "px";
  };
  onSlideEnd = function(x, y) {
    foregroundElem.className = foregroundElem.className.replace("dragged", "");
    foregroundElem.style.left = "0px";
    if (activeAction && activeAction.callback) {
      activeAction.callback();
    }
  };
  onDragStart = function(e) {
    if (e.touches) {
      return;
    }
    onSlideStart(e.pageX, e.pageY);
    window.addEventListener("mousemove", onDragMove, false);
    window.addEventListener("mouseup", onDragEnd, false);
  };
  onDragMove = function(e) {
    onSlide(e.pageX, e.pageY);
  };
  onDragEnd = function(e) {
    e.currentTarget.removeEventListener("mousemove", onDragMove);
    e.currentTarget.removeEventListener("mouseup", onDragEnd);
    onSlideEnd(e.pageX, e.pageY);
  };
  onTouchStart = function(e) {
    touchDragging = false;
    onSlideStart(e.touches[0].clientX, e.touches[0].clientY);
    e.currentTarget.addEventListener("touchmove", onTouchMove, false);
    e.currentTarget.addEventListener("touchend", onTouchEnd, false);
  };
  onTouchMove = function(e) {
    onSlide(e.touches[0].clientX, e.touches[0].clientY);
    if (touchDragging || Math.abs(deltaX) >= Math.abs(deltaY)) {
      touchDragging = true;
      e.preventDefault();
      return false;
    } else {
      if (!touchDragging && Math.abs(deltaX) < 10 && Math.abs(deltaY) > 10) {
        console.log("nothing");
      }
    }
    if (!touchDragging) {
      onSlideScroll();
    }
  };
  onTouchEnd = function(e) {
    e.currentTarget.removeEventListener("touchmove", onTouchMove);
    e.currentTarget.removeEventListener("touchend", onTouchEnd);
    onSlideEnd(0, 0);
  };
  foregroundElem.addEventListener('mousedown', onDragStart, false);
  return foregroundElem.addEventListener('touchstart', onTouchStart, false);
};

Ram.Item = React.createClass({
  getInitialState: function() {
    return {};
  },
  componentDidMount: function() {
    return this.prepareItemComonent();
  },
  prepareItemComonent: function() {
    return addItemEventHandlers(this.getDOMNode(), {
      actions: {
        left: {
          primary: {
            icon: "img/move_right.png",
            color: [0, 200, 250],
            callback: (function(_this) {
              return function() {
                _this.getDOMNode().dispatchEvent(new CustomEvent('itemMoveRightAction', {
                  detail: _this.props.item,
                  bubbles: true
                }));
              };
            })(this)
          },
          secondary: {
            icon: "img/edit.png",
            color: [250, 200, 0],
            callback: (function(_this) {
              return function() {
                _this.getDOMNode().dispatchEvent(new CustomEvent('itemEditAction', {
                  detail: _this.props.item,
                  bubbles: true
                }));
              };
            })(this)
          }
        },
        right: {
          primary: {
            icon: "img/move_left.png",
            color: [0, 200, 250],
            callback: (function(_this) {
              return function() {
                _this.getDOMNode().dispatchEvent(new CustomEvent('itemMoveLeftAction', {
                  detail: _this.props.item,
                  bubbles: true
                }));
              };
            })(this)
          },
          secondary: {
            icon: "img/x.png",
            color: [200, 0, 10],
            callback: (function(_this) {
              return function() {
                _this.getDOMNode().dispatchEvent(new CustomEvent('itemDeleteAction', {
                  detail: _this.props.item,
                  bubbles: true
                }));
              };
            })(this)
          }
        }
      }
    });
  },
  onClick: function(e) {
    return this.props.onClick(e, this.refs.measurement);
  },
  render: function() {
    var editedClass, padding;
    editedClass = this.props.edited ? 'edited' : '';
    padding = 15;
    return React.DOM.li({
      className: 'item',
      'data-id': this.props.item._id
    }, React.DOM.div({
      ref: 'div',
      onClick: this.onClick,
      className: editedClass,
      style: {
        overflow: 'hidden',
        backgroundPosition: 0. + 'px 0px'
      }
    }, React.DOM.span({
      ref: 'measurement',
      style: {
        display: 'inline-block',
        position: 'absolute',
        xmaxHeight: '1px',
        xfontSize: 1,
        background: 'red',
        xtop: '50%',
        left: '0px',
        top: '100%'
      }
    }, this.props.item.get('text') || ''), React.DOM.span({
      ref: 'span',
      className: 'text',
      contentEditable: this.props.edited,
      onKeyDown: this.props.onKeyDown,
      onKeyUp: this.props.onKeyUp,
      onInput: this.props.onInput,
      onPaste: this.props.onPaste,
      style: {
        paddingLeft: padding + 'px',
        backgroundPosition: this.props.level * 5 + 'px 0px'
      }
    }, this.props.item.get('text') || ''), React.DOM.span({
      className: 'detail'
    }, '>')));
  }
});
