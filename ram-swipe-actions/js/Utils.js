// Generated by CoffeeScript 1.6.2
var Ram;

Ram = Ram || {};

Ram.Utils = (function() {
  var getLeafNode, getModernOffsets, getNodeForCharacterOffset, getSiblingNode, setEndOfContenteditable, setModernOffsets;

  getModernOffsets = function(node) {
    var anchorNode, anchorOffset, currentRange, detectionRange, end, focusNode, focusOffset, isBackward, rangeLength, selection, start, tempRange;

    selection = window.getSelection();
    if (selection.rangeCount === 0) {
      return null;
    }
    anchorNode = selection.anchorNode;
    anchorOffset = selection.anchorOffset;
    focusNode = selection.focusNode;
    focusOffset = selection.focusOffset;
    currentRange = selection.getRangeAt(0);
    rangeLength = currentRange.toString().length;
    tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
    start = tempRange.toString().length;
    end = start + rangeLength;
    detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    isBackward = detectionRange.collapsed;
    detectionRange.detach();
    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  };
  setModernOffsets = function(node, offsets) {
    var end, endMarker, length, range, selection, start, startMarker, temp;

    selection = window.getSelection();
    length = node.textContent.length;
    start = Math.min(offsets.start, length);
    end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
    if (!selection.extend && start > end) {
      temp = end;
      end = start;
      start = temp;
    }
    startMarker = getNodeForCharacterOffset(node, start);
    endMarker = getNodeForCharacterOffset(node, end);
    if (startMarker && endMarker) {
      range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
      return range.detach();
    }
  };
  getLeafNode = function(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  };
  getSiblingNode = function(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  };
  getNodeForCharacterOffset = function(root, offset) {
    var node, nodeEnd, nodeStart;

    node = getLeafNode(root);
    nodeStart = 0;
    nodeEnd = 0;
    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
        nodeStart = nodeEnd;
      }
      node = getLeafNode(getSiblingNode(node));
    }
  };
  setEndOfContenteditable = function(contentEditableElement) {
    var range, selection;

    if (document.createRange) {
      range = document.createRange();
      range.selectNodeContents(contentEditableElement);
      range.collapse(false);
      selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
    }
    return contentEditableElement.focus();
  };
  return {
    getModernOffsets: getModernOffsets,
    setModernOffsets: setModernOffsets,
    setEndOfContenteditable: setEndOfContenteditable
  };
})();
