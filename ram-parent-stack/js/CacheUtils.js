// Generated by CoffeeScript 1.6.2
var Ram;

Ram = Ram || {};

Ram.CacheUtils = (function() {
  var appendScript, appendStyle, fileNameToLocalStorageName, getFiles, getFromLocalStorage, getJson, getUrl, isCssFile, isJsFile, loadCSSFiles, loadContentFiles, loadFiles, loadJSFiles, notNull;

  getUrl = function(url, callback) {
    var r;

    r = new XMLHttpRequest();
    r.open('GET', url, true);
    r.withCredentials = true;
    r.onreadystatechange = function() {
      if (r.readyState === 4) {
        if (callback) {
          if (r.status === 200) {
            callback(r.responseText);
          } else {
            callback(null);
          }
        }
      } else {

      }
    };
    return r.send('');
  };
  getJson = function(url, callback) {
    return getUrl(url, function(response) {
      if (callback) {
        if (response) {
          return callback(JSON.parse(response));
        } else {
          return callback({
            error: 'Invalid or no response'
          });
        }
      }
    });
  };
  appendScript = function(src) {
    var script, scriptNode;

    script = document.createElement('script');
    script.type = "text/javascript";
    scriptNode = document.createTextNode(src);
    script.appendChild(scriptNode);
    return document.head.appendChild(script);
  };
  appendStyle = function(css) {
    var cssNode, style;

    style = document.createElement('style');
    style.type = "text/css";
    cssNode = document.createTextNode(css);
    style.appendChild(cssNode);
    return document.head.appendChild(style);
  };
  fileNameToLocalStorageName = function(fileName) {
    return fileName.replace(/[^\w]/g, '_');
  };
  notNull = function(o) {
    return o !== null;
  };
  getFromLocalStorage = function(fileStorageName) {
    return window.localStorage[fileStorageName];
  };
  getFiles = function(files) {
    var done, doneCallback, filesToLoad, loadNext, loadedFiles;

    filesToLoad = files.map(function(o) {
      return o;
    });
    loadedFiles = [];
    done = false;
    doneCallback = null;
    loadNext = function() {
      var file;

      if (filesToLoad.length === 0) {
        done = true;
        if (doneCallback) {
          doneCallback(loadedFiles);
        }
        return;
      }
      file = filesToLoad.shift();
      return getUrl(file + '?t=' + Math.random(), function(data) {
        loadedFiles.push(data);
        return loadNext();
      });
    };
    loadNext();
    return {
      then: function(callback) {
        if (done && callback) {
          return callback(loadedFiles);
        } else {
          return doneCallback = callback;
        }
      }
    };
  };
  loadContentFiles = function(files, fileAction, callback) {
    var cachedFiles, cachedFilesNames, newFiles;

    console.log('loadContentFiles', files);
    cachedFilesNames = files.map(fileNameToLocalStorageName);
    cachedFiles = cachedFilesNames.map(getFromLocalStorage);
    cachedFiles.filter(notNull).forEach(fileAction);
    newFiles = 0;
    return getFiles(files).then(function(loadedFiles) {
      cachedFilesNames.forEach(function(name, i) {
        if (loadedFiles[i] && loadedFiles[i] !== window.localStorage[name]) {
          console.log('Updated', name);
          window.localStorage[name] = loadedFiles[i];
          return newFiles++;
        }
      });
      if (callback) {
        return callback(newFiles > 0);
      }
    });
  };
  loadJSFiles = function(files, callback) {
    return loadContentFiles(files, appendScript, callback);
  };
  loadCSSFiles = function(files, callback) {
    console.log('loadCSSFiles');
    return loadContentFiles(files, appendStyle, callback);
  };
  isCssFile = function(fileName) {
    return fileName.match(/\.css$/);
  };
  isJsFile = function(fileName) {
    return fileName.match(/\.js$/);
  };
  loadFiles = function(files, callback) {
    var cssFiles, jsFiles;

    console.log('loadFiles');
    cssFiles = files.filter(isCssFile);
    jsFiles = files.filter(isJsFile);
    return loadCSSFiles(cssFiles, function(isCssUpdated) {
      console.log('Ram.CacheUtils.loadFiles css done');
      return loadJSFiles(jsFiles, function(isJsUpdated) {
        console.log('Ram.CacheUtils.loadFiles js done');
        if (callback) {
          return callback(isCssUpdated || isJsUpdated);
        }
      });
    });
  };
  return {
    loadFiles: loadFiles,
    getUrl: getUrl,
    getJson: getJson
  };
})();

/*
//@ sourceMappingURL=CacheUtils.map
*/
